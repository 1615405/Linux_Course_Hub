1.  单独设立 .rodata 段, 不光是在语义上支持了C++的const关键字, 而且操作系统在加载的时候可以将 .rodata 段的属性映射成只读, 这样对于这个段
    的任何修改操作都会作为非法操作确定, 保证了程序的安全性.


2.  自定义段
    - 正常情况下, GCC编译出来的目标文件中, 代码会被放到 .text 段, 全局变量和静态变量会被放到 .data 和 .bss 段. GCC 提供了一个扩展机制,
      使得程序员可以指定变量所处的段.
    -  __attribute__((section("FOO"))) int global = 42
       __attribute__((section("BAR"))) void foo() {}
    -  objdump -x -s -d hello.o
    -  readelf -S hello.o 


3.  ELF 文件结构描述
    - ELF的文件头中定义了ELF魔数, 文件机器字节长度, 数据存储方式, 版本, 运行平台, ABI版本, ELF重定位类型, 硬件平台, 硬件平台版本, 入口地址,
      程序头入口和长度, 段表的位置和长度以及段的数量等.

    - ELF32 文件头结构体
      typedef struct {
          unsigned char e_ident[EI_NIDENT];     /* Magic number and other info */
          Elf32_Half    e_type;                 /* Object file type */
          Elf32_Half    e_machine;              /* Architecture */
          Elf32_Word    e_version;              /* Object file version */
          Elf32_Addr    e_entry;                /* Entry point virtual address */
          Elf32_Off     e_phoff;                /* Program header table file offset */
          Elf32_Off     e_shoff;                /* Section header table file offset */
          Elf32_Word    e_flags;                /* Processor-specific flags */
          Elf32_Half    e_ehsize;               /* ELF header size in bytes */
          Elf32_Half    e_phentsize;            /* Program header table entry size */
          Elf32_Half    e_phnum;                /* Program header table entry count */
          Elf32_Half    e_shentsize;            /* Section header table entry size */
          Elf32_Half    e_shnum;                /* Section header table entry count */
          Elf32_Half    e_shstrndx;             /* Section header string table index */
    } Elf32_Ehdr;

    - ELF 魔数    Magic:  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
        - 最开始的四个字节是所有ELF文件都必须相同的标识码, 分别为0x7F, 0x4F, 0x4c, 0x46. 第一个字节对应ASCII字符里面的DEL控制符, 
          后面3个字节恰好是ELF这3个字母的ASCII码. 这四个字节被称为ELF文件的魔数.
        - 第五个字节用来标识ELF的文件类型, 0x01表示32位的, 0x02表示是64位的.
        - 第六个字节是字节序, 规定该ELF文件是大端的还是小端的(1 -> 小端格式; 2 -> 大端格式).
    - 文件类型:  EX_REL -> 可重定位文件   EX_EXEC -> 可执行文件   EX_DYN -> 共享目标文件


4.  段表
  typedef struct {
      Elf32_Word    sh_name;                /* Section name (string tbl index) */
      Elf32_Word    sh_type;                /* Section type */
      Elf32_Word    sh_flags;               /* Section flags */
      Elf32_Addr    sh_addr;                /* Section virtual addr at execution */
      Elf32_Off     sh_offset;              /* Section file offset */
      Elf32_Word    sh_size;                /* Section size in bytes */
      Elf32_Word    sh_link;                /* Link to another section */
      Elf32_Word    sh_info;                /* Additional section information */
      Elf32_Word    sh_addralign;           /* Section alignment */
      Elf32_Word    sh_entsize;             /* Entry size if section holds table */
    } Elf32_Shdr;
